/**
Time Complexity - O(mn)
Space complexity - O(mn)
 */
class Solution {

    public int[][] updateMatrix(int[][] mat) {

        if (mat == null || mat.length == 0) {
            return mat;
        }
        
        int m = mat.length;
        int n = mat[0].length;

        int[][] dirs = new int[][]{{-1,0},{0,-1},{1,0},{0,1}};

        Queue<int[]> queue = new LinkedList<>();
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (mat[i][j] == 0) {
                    queue.add(new int[]{i,j});
                } else {
                    mat[i][j] = -1;
                }
            }
        }

        int dist=1;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for (int i=0; i<size; i++) {
                int[] curr = queue.poll();
                for (int[] dir: dirs) {
                    int nr = curr[0] + dir[0];
                    int nc = curr[1] + dir[1];

                    if (nr >=0 && nc >=0 && nr <m && nc <n && mat[nr][nc] == -1) {
                        queue.add(new int[]{nr, nc});
                        mat[nr][nc] = dist;
                    }
                }
            }
            dist = dist+1;
        }
        return mat;
    }
}
