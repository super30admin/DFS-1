class Solution {
    public void helper(Queue<int[]> q,int[] x,int[][] image,int color,int newColor)
    {
        int r=x[0],c=x[1];
        if(c!=image[0].length-1 && image[r][c+1]==color)
        {
            image[r][c+1]=newColor;
            q.add(new int[]{r,c+1});
        }
        if(c!=0 && image[r][c-1]==color)
        {
            image[r][c-1]=newColor;
            q.add(new int[]{r,c-1});
        }
        if(r!=0 && image[r-1][c]==color)
        {
            image[r-1][c]=newColor;
            q.add(new int[]{r-1,c});
        }
        if(r!=image.length-1 && image[r+1][c]==color)
        {
            image[r+1][c]=newColor;
            q.add(new int[]{r+1,c});
        }
        return;
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        Queue<int[]> q=new LinkedList<>();
        int color=image[sr][sc];
        if(color == newColor) return image;
        q.add(new int[]{sr,sc});
        image[sr][sc]=newColor;
        while(!q.isEmpty())
        {
            int[] x=q.remove();
            helper(q,x,image,color,newColor);
        }
        return image;
    }
}