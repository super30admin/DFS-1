class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        
        //542. 01 Matrix
        
        //Time complexity : O(mn*mn) for every element in the array it taked "mn"                                   time.'m' is the no. of rows and 'n' is the no. of columns
        //Space is :O(m*n)
        
        if(matrix.length ==0 || matrix == null)
            return matrix;
        
        int rows = matrix.length;
        int cols = matrix[0].length;
        Queue<int[]> q = new LinkedList<>();
        int dist =1;
        int[][] dirs ={{0,-1},{0,1},{1,0},{-1,0}};
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(matrix[i][j]==0)
                    q.add(new int[]{i,j});
                 else
                matrix[i][j]=-1;
            }
           
        }
        
        while(!q.isEmpty()){
            int size = q.size();
            
            for(int i=0;i<size;i++){
                
                int[] current = q.poll();
                for(int[] dir :dirs){
                    int r = dir[0]+current[0];
                    int c = dir[1]+current[1];
                    if(r>=0 && r<rows && c>=0 && c<cols && matrix[r][c]==-1)
                    {
                        matrix[r][c] =dist;
                        q.add(new int[] {r,c});
                    }
                }
            }
            dist++;
        }
        return matrix;
    }
}