/***************
Time O(n)
Space O(n)
Leetcode yes
Problem no
*****************/

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        
        // Nothing needs to be done if starting pixel has same color as new color
        if(image[sr][sc] == newColor)
            return image;
        
        fill(image , sr , sc , image[sr][sc] , newColor );
        return image;
        
        
    }
    
    public void fill(int[][] image, int i , int j , int color , int newColor)
    {
        // preventing corner cases 
        if( i<0 || i>=image.length || j >= image[i].length || j< 0 || image[i][j]!=color )
            return;
        image[i][j] = newColor;
        
        // calling recursively in all the four directions
        fill(image, i+1 , j  , color,newColor);
        fill(image, i , j-1  , color,newColor);
        fill(image, i , j+1  , color,newColor);
        fill(image, i-1 , j  , color,newColor);
        
    }
}
