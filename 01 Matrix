#time complexity: O(m*n)
#space complexity: O(m*n)
#did it run on leetcode: yes
class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        if not mat or not mat[0]: 
            return []
        m,n = len(mat), len(mat[0])
        q = deque()
        max_value = m*n
        for i in range(m):
            for j in range(n):
                if mat[i][j]==0:
                    q.append((i,j))
                else:
                    mat[i][j] = max_value
        directions = [(1,0), (-1,0), (0,1), (0,-1)]

        while q:
            row,col = q.popleft()
            for dr,dc in directions:
                r,c = row+dr, col+dc
                if 0<=r<m and 0<=c<n and mat[r][c]>mat[row][col]+1:
                    q.append((r,c))
                    mat[r][c] = mat[row][col]+1
        return mat        
