//TC = O(mn)
//SC = O(mn) -> incase of all zeros

class Solution {
    private int[][] directions = {
        {0,1},
        {1,0},
        {-1,0},
        {0,-1}
    };
    
    public int[][] updateMatrix(int[][] mat) {
        
        int m = mat.length, n = mat[0].length;
        
        Queue<int[]> q = new LinkedList<>();
        
        for(int i=0; i<m; ++i){
            for(int j=0; j<n; j++){
                
                if(mat[i][j] == 0){    //initially we are adding 0s in q
                    q.add(new int[]{i, j});
                }
                else{
                    mat[i][j] = -1;   //else matrix will have all -1
                }
            }
        }
        
        int dist = 1;
        
        while(!q.isEmpty()){
            
            Queue<int[]> next = new LinkedList<>();
            
            while(!q.isEmpty()){
                
                int[] xy = q.remove();
                
                for(int[] dir : directions){
                    
                    int X = xy[0] + dir[0];
                    int Y = xy[1] + dir[1];
                    
                    if(X>=0 && X<m && Y>=0 && Y<n){
                        
                        if(mat[X][Y] == -1){   //if -1 that means not visited earlier
                            
                            mat[X][Y] = dist;    //if not visited then intializing distance from current 0 
                            next.add(new int[]{X, Y});  //adding to next queue
                        }
                    }

                }
            }
            
            dist++;
            q = next;
        }
        
        return mat;
      
    }
}
