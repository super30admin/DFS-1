//Time complexity : O(m2 * n2) - For every 1, do bfs until you find a zero and return distance. 

//Implemented BFS
//Time complexity : O(m*n), Space Complexity : O(m*n)
//Think in terms of 0->1, Put all independent nodes (0) in queue and maintain level and mutate the distance of 1 to get update matrix.
//-1 will identify if it's a visited node or not. 

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        if(mat == null || mat.length == 0) { return mat; }
        
        Queue<int[]> q = new LinkedList<>();
        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};
        
        int m = mat.length;
        int n = mat[0].length;
        
        int level = 1;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(mat[i][j] == 0) {
                    q.add(new int[]{i, j});
                } else {
                    mat[i][j] = -1;
                }
            }
        }
        
        while(! q.isEmpty()) {
            int size = q.size();
            for(int i =0 ; i < size; i++) {
                int[] curr = q.poll();
                for(int[] dir : dirs) {
                    int cr = curr[0] + dir[0];
                    int cc = curr[1] + dir[1];
                    
                    if(cr >= 0 && cr < m && cc >= 0 && cc < n && mat[cr][cc] == -1) {
                        mat[cr][cc] = level;
                        q.add(new int[]{cr, cc});
                    }
                }
            }
            level++;
        }
        
        return mat;
        
    }
}
