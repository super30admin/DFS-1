// Time Complexity : O(m*n) where m is the number of rows and columns
// Space Complexity : O(m*n) 
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach :  Adding the nodes with no dependency.that is the zero's have no dependency. Mark all the 1's as -1's do differenciate between visited and unvised nodes. Move to their neighbours check for -1's. If yes update the distance of the neighbours and add them to the queue to inturn check for the next cycle of neighbours.At the end of each cycle increment the distance to indicate their distance from the zero.


class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if(matrix==null || matrix.length==0) return matrix;
        int m=matrix.length;int n=matrix[0].length;
        Queue<int []> q=new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==0){
                    q.add(new int[] {i,j});
                }
                else{
                    matrix[i][j]=-1;
                }
            }
        }
        int distance=1;
        int[][] dirs={{0,1},{1,0},{-1,0},{0,-1}};
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                int[] curr=q.poll();
                for(int[] dir:dirs){
                    int r=dir[0]+curr[0];
                    int c=dir[1]+curr[1];
                    if(r>=0 && r<m && c>=0 && c<n && matrix[r][c]==-1){
                        matrix[r][c]=distance;
                        q.add(new int[] {r,c});
                    }
                }
            }
            distance++;
        }
      return matrix;  
    }
}