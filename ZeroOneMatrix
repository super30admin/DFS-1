/*
TC: O(mn)
SC: O(mn)
 */

class ZeroOneMatrix{
    public int[][] updateMatrix(int[][] matrix) {

        int m = matrix.length,n = matrix[0].length;
        if (m == 0 || matrix == null)return null;

        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (matrix[i][j] == 0){
                    q.offer(new int[]{i,j});
                }
                else{
                    matrix[i][j] = -1;
                }
            }
        }
        int dirs[][] = new int[][]{{-1,0},{1,0},{0,1},{0,-1}};
        int dist = 1;

        while(!q.isEmpty()){
            int size = q.size();
            for (int i = 0; i < size; i++){
                int[] curr = q.poll();
                for (int dir[] : dirs){
                    int cr = curr[0] + dir[0];
                    int cc = curr[1] + dir[1];

                    if (cr >= 0 && cc >= 0 && cr < m && cc < n && matrix[cr][cc] == -1){
                        matrix[cr][cc] = dist;
                        q.offer(new int[]{cr,cc});
                    }
                }

            }
            dist++;
        }

        return matrix;
}