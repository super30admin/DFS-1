// Time Complexity: O(m*n)
// Space Complexity: O(m*n)

class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if(matrix.length == 0 || matrix == null) return matrix;

        Queue<int []> q = new LinkedList<>();

        for(int i = 0 ; i < matrix.length ; i++){
            for(int j = 0 ; j < matrix[0].length ; j++){
                // put 0 in queue as it is had no dependency
                if(matrix[i][j] == 0){
                    q.add(new int[]{i,j});
                }
                else{
                    matrix[i][j] = -1;
                }
            }
        }

        int dist = 1;
        int[][] dirs = new int[][]{{0,1}, {0,-1}, {1,0}, {-1, 0}};

        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0 ; i < size ; i++){
                int[] curr = q.poll();

                for(int[] dir: dirs){
                    int r = dir[0] + curr[0];
                    int c = dir[1] + curr[1];
                    if(r >= 0 && c >= 0 && r < matrix.length && c < matrix[0].length && matrix[r][c] == -1){
                        matrix[r][c] = dist;
                        q.add(new int[]{r,c});
                    }
                }


            }
            dist++;
        }
        return matrix;

    }
}
