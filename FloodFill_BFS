// Time Complexity: O(MxN), M = number of rows, n = number of columns
// Space Complexity: O(MxN), M = number of rows, n = number of columns

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        if(image == null || image.length == 0 || color == image[sr][sc])
            return image;
        
        int start = image[sr][sc], m = image.length, n = image[0].length;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {sr, sc});
        int[][] dirs = new int[][] {{0,1}, {1,0}, {-1,0}, {0,-1}};
        while(!queue.isEmpty()) {
            int[] curr = queue.poll();
            image[curr[0]][curr[1]] = color;
            for(int[] dir: dirs) {
                int row = curr[0] + dir[0];
                int col = curr[1] + dir[1];
                if(row >= 0 && row < m && col >=0 && col < n && image[row][col] == start) {
                    queue.add(new int[] {row, col});
                }
            }
        }
        return image;
    }
}
