// Time Complexity : o(nm)
// Space Complexity : o(nm)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
/*
* BFS traversal from all zeros. if there are any adjacent 1's to the zeroes then the time taken is i units
* No of levels processed from zero gives the distance
* */

class Solution {
    public int[][] updateMatrix(int[][] mat) {

        int dir[][] = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        Queue<int[]> q = new LinkedList<>();
        for(int i =0; i< mat.length; i++){
            for(int j = 0; j< mat[0].length; j++){
                if(mat[i][j]==0){
                    q.add(new int[]{i,j});
                }
                else {
                    mat[i][j] =-1;
                }
            }
        }
        int distance = 1;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i =0; i< size; i++){
                int[] idx = q.poll();
                for(int k =0; k< dir.length; k++){
                    int x = dir[k][0] + idx[0];
                    int y = dir[k][1] + idx[1];
                    if(x>=0 && y>=0 && x<mat.length && y<mat[0].length&& mat[x][y] ==-1){
                        mat[x][y] = distance;
                        q.add(new int[]{x,y});
                    }
                }
            }

            distance++;
        }
        return mat;
    }
}