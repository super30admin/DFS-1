Approach 1 : BFS
Time Complexity : O(R*C)
Space Complexity : O(R*C) for Queue
lass Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if matrix is None and len(matrix)==0 : return matrix
        m=len(matrix)
        n=len(matrix[0])
        q=collections.deque([])
        for i in range(m):
            for j in range(n):
                if matrix[i][j]!=0:
                    matrix[i][j]=-1
                else:
                    q.append((i,j))
        dist=1 ### Next Neighbours which will be processed will have dist 1 from cur
        dirs=[(0,1),(0,-1),(1,0),(-1,0)]
        while q:
            size=len(q)
            for i in range(size):
                row,col=q.popleft() ### returns Row and Column
                for dire in dirs:
                    r=row+dire[0]
                    c=col+dire[1]
                    if r>=0 and c>=0 and r<m and c<n and matrix[r][c]==-1: ## Check outbound and also matrix neighbor elements are -1
                        matrix[r][c]=dist ## Updating the elements with distance
                        q.append((r,c))
            dist+=1
            
        return matrix
