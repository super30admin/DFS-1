//TC:- O(m*n)
//SC:- O(m*n)

class Solution {
     
    class Pair{
        int x;
        int y;
        
        Pair(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
        
        public int getX()
        {
            return this.x;
        }
        
        public int getY()
        {
            return this.y;
        }
    }
    
    
    public int[][] updateMatrix(int[][] mat) {
        
        Queue <Pair> q = new LinkedList<>();
        int distance = 0;
        int[][] dirs = { {0,1}, {0,-1}, {1,0}, {-1, 0} };
        
        for(int i = 0; i < mat.length; i++)
        {
            for (int j = 0 ; j < mat[0].length; j++)
            {
                if(mat[i][j] == 0)
                {
                    q.add(new Pair(i, j));
                }
                
                else
                {
                    mat[i][j] = -1;
                }
            }
        }
        
        while(!q.isEmpty())
        {
            int size = q.size();
            
            for(int i = 0; i < size; i++)
            {
                Pair curr = q.poll();
                //mat[curr.getX()][curr.getY()] = distance;
                
                for(int[] dir : dirs)
                {
                    int row = curr.getX() + dir[0];
                    int col = curr.getY() + dir[1];
                    
                    if(row >= 0 && row < mat.length && col >= 0 && col < mat[0].length && mat[row][col] == -1)
                    {
                        q.add(new Pair(row, col));
                        mat[row][col] = distance + 1;
                    }
                }
            }
            
            distance++; 
            
           
            
        }
        
        return mat;
    }
}
