//BFS

//TimeComplexity O(m*n)
//SpaceComplexity O(m*n)

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        
        //null check
        if(image == null)return image;
        
        Queue<int[]> q = new LinkedList<>();
        int old_color = image[sr][sc];
        q.add(new int[] {sr,sc});
        image[sr][sc] = color;
        
        if(old_color == color)return image;
        
        //top,right,bottom,left
        int[][] dirs = new int[][] {{-1,0}, {0,1}, {1,0},{0,-1}};
        
        while(!q.isEmpty()){
            int[] curr = q.poll();
            
            for(int[] dir : dirs){
                int nr = curr[0] + dir[0];
                int nc = curr[1] + dir[1];
                
                //bound check & value check
                if(nr >= 0 && nc >= 0 && nr < image.length && nc < image[0].length && image[nr][nc] == old_color){
                    q.add(new int[] {nr,nc});
                    image[nr][nc] = color;
                }
            }
            
        }
        return image;
        
    }
}

//DFS

//TimeComplexity O(m*n)
//SpaceComplexity O(m*n)

class Solution {
    int[][] dirs;
    int m;
    int n;
    int old_color;
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        
        m = image.length;
        n = image[0].length;
        old_color = image[sr][sc];
        if(image == null || image[sr][sc] == color)return image;
        
        dirs = new int[][] {{-1,0}, { 0,1}, {1,0},{0,-1}};
        
        
        dfs(image,sr,sc,color);
        return image;        
    }
    
    private void dfs(int[][] image, int sr, int sc, int color){
        
        if(sr <0 || sc < 0 || sr == m || sc == n || image[sr][sc] != old_color)return;
        
        image[sr][sc] = color;
        for(int[] dir : dirs){
            int nr = sr + dir[0];
            int nc = sc + dir[1];
            
            dfs(image,nr,nc,color);
        }
    }        
}
