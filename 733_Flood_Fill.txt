// Time Complexity : o(nm)
// Space Complexity : o(nm)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
/*
* if the current color is same as the color to be changed then return the image matrix as is
* Do BFS and change the color of pixel level by level.
* */

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int prevColor = image[sr][sc];
        if(color == prevColor){
            return image;
        }
        int[][] dir = {{0,1}, {0,-1}, {-1,0}, {1,0}};
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{sr,sc});
        while(!q.isEmpty()){
            int size = q.size();
            for(int i =0; i< size; i++){
                int[] idx = q.poll();
                image[idx[0]][idx[1]] = color;
                for(int d = 0; d< dir.length; d++){
                    int x = dir[d][0] + idx[0];
                    int y = dir[d][1] + idx[1];
                    if(x>=0 && y>=0 && x<image.length && y<image[0].length && image[x][y] == prevColor){
                        q.add(new int[]{x,y});
                    }
                }
            }
        }
        return image;
    }


}