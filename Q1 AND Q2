\\Q1
// Time Complexity :O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
       int n=image.size(),m=image[0].size(),old=image[sr][sc];
        image[sr][sc]=newColor;
        queue<vector<int>> que;
        que.push(vector<int> {sr,sc});
        vector<vector<int>> dirs {{1,0},{-1,0},{0,1},{0,-1}};
        while(!que.empty())
        {
            vector<int> x=que.front();
            que.pop();
            for(int i=0;i<4;i++)
            {
                int a= dirs[i][0] + x[0];
                int b= dirs[i][1] + x[1];
                if(a>=0 && a<n && b>=0 && b<m && image[a][b]==old && image[a][b]!=newColor)
                {
                    image[a][b]=newColor;
                    que.push(vector<int> {a,b});
                }
            }
        }
        return image;
    }
};



Q2

// Time Complexity :O(n*m)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No

class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int n=matrix.size(),m=matrix[0].size();
        queue<vector<int>> que;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0)
                {
                    que.push(vector<int> {i,j});
                }
                else
                    matrix[i][j]=INT_MAX;
            }
        }
        vector<vector<int>> dirs {{1,0},{-1,0},{0,1},{0,-1}};
        while(!que.empty())
        {
            vector<int> x=que.front();
            que.pop();
            for(int i=0;i<4;i++)
            {
                int a= dirs[i][0] + x[0];
                int b= dirs[i][1] + x[1];
                if(a>=0 && a<n && b>=0 && b<m && matrix[x[0]][x[1]] +1<matrix[a][b])
                {
                    matrix[a][b]=matrix[x[0]][x[1]] +1;
                    que.push(vector<int> {a,b});
                }
        }
        }
            
            return matrix;
    }
};
