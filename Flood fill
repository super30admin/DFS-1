//Time Complexity : O(m*n)
//Space Complexity : O(m * n)
//DFS 

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        if(image == null || image[sr][sc] == color){
            return image;
        }
        
        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};
        
        int m = image.length;
        int n = image[0].length;
        int originalColor = image[sr][sc];
        dfs(image, sr, sc, m, n, originalColor, color, dirs);
        return image;
        
    }
    
    private void dfs(int[][] image, int i, int j, int m, int n, int originalColor, int color, int[][] dirs) {
        //Base
        if(i < 0 || i >= m || j < 0 || j >= n || image[i][j] != originalColor) return;
        
        //Logic
        image[i][j] = color;
        for(int[] dir : dirs) {
            int cr = i + dir[0];
            int cc = j + dir[1];
            
            dfs(image, cr, cc, m, n, originalColor, color, dirs);
        }
    }
}



//Time Complexity : O(m*n)
//Space Complexity : O(m/2 * n/2) -- all leaf nodes. 
//BFS 

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        if(image == null || image[sr][sc] == color) return image;
        
        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};
        Queue<int[]> q = new LinkedList<>();
        
        int orgColor = image[sr][sc];
        image[sr][sc] = color;
        q.add(new int[]{sr, sc});
        
        
        while(!q.isEmpty()) {
            int[] curr = q.poll();
            for(int[] dir : dirs) {
                int cr = curr[0] + dir[0];
                int cc = curr[1] + dir[1];
                
                if(cr >= 0 && cr < image.length && cc >=0 && cc < image[0].length 
                   && image[cr][cc] == orgColor) {
                    image[cr][cc] = color;
                    q.add(new int[]{cr, cc});
                }
            }
        }
        
        return image;
    }
}
