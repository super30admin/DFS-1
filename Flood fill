// Time Complexity : O(m*n)
// Space Complexity : O(m*n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        if(image == null || image.length == 0 || image[sr][sc] == newColor)return image;
        int m = image.length; int n= image[0].length;
        int color = image[sr][sc];
        Queue<int []> q = new LinkedList<>();
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        q.add(new int[]{sr,sc});
        image[sr][sc] = newColor;
        while(!q.isEmpty()){
            int [] curr = q.poll();
            for(int [] dir:dirs){
                int r = dir[0]+curr[0];
                int c = dir[1] + curr[1];
                if(r >=0 && r<m && c>=0 && c<n && image[r][c] == color){
                    image[r][c] = newColor;
                    q.add(new int[]{r,c});
                }
            }
        }
        return image;
    }
}