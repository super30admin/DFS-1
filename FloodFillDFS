// Time Complexity: O(m*n)
// Space Complexity: O(m*n)

class Solution {
    int[][] dirs;
    int color;
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {

        if(image == null || image.length == 0 || image[sr][sc] == newColor) return image;

        color = image[sr][sc];
        dirs = new int[][]{{0,1}, {0, -1}, {1, 0}, {-1, 0}};
        dfs(image, sr, sc, newColor);
        return image;
    }

    private void dfs(int[][] image, int sr, int sc, int newColor){
        // base
        if(sr < 0 || sc < 0 || sr >= image.length || sc >= image[0].length || image[sr][sc] != color) return;

        //logic
        image[sr][sc] = newColor;
        for(int[] dir : dirs){
            int r = dir[0] + sr;
            int c = dir[1] + sc;
            dfs(image, r, c, newColor);
        }
    }
}
